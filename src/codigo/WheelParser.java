
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 02 16:01:19 MST 2025
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 02 16:01:19 MST 2025
  */
public class WheelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public WheelParser() {super();}

  /** Constructor which sets the default scanner. */
  public WheelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public WheelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\006\000\002\006\005\000\002\007\004\000\002" +
    "\015\003\000\002\015\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\011" +
    "\000\002\012\006\000\002\012\002\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\011\005\001\002\000\004\002\061\001" +
    "\002\000\004\020\006\001\002\000\024\004\025\005\010" +
    "\006\013\013\015\014\017\015\021\016\011\021\ufffe\023" +
    "\024\001\002\000\024\004\ufff9\005\ufff9\006\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\021\ufff9\023\ufff9\001\002\000" +
    "\004\023\056\001\002\000\024\004\ufff0\005\ufff0\006\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\023\ufff0\001" +
    "\002\000\004\021\054\001\002\000\004\023\037\001\002" +
    "\000\024\004\025\005\010\006\013\013\015\014\017\015" +
    "\021\016\011\021\ufffe\023\024\001\002\000\024\004\ufff3" +
    "\005\ufff3\006\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\021" +
    "\ufff3\023\ufff3\001\002\000\024\004\ufffc\005\ufffc\006\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\021\ufffc\023\ufffc\001" +
    "\002\000\024\004\ufff2\005\ufff2\006\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\021\ufff2\023\ufff2\001\002\000\024\004" +
    "\ufffd\005\ufffd\006\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\021\ufffd\023\ufffd\001\002\000\024\004\ufff1\005\ufff1\006" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\023\ufff1" +
    "\001\002\000\024\004\ufffa\005\ufffa\006\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\021\ufffa\023\ufffa\001\002\000\024" +
    "\004\ufffb\005\ufffb\006\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\021\ufffb\023\ufffb\001\002\000\004\017\031\001\002" +
    "\000\006\022\030\023\027\001\002\000\024\004\ufff6\005" +
    "\ufff6\006\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\021\ufff6" +
    "\023\ufff6\001\002\000\024\004\ufff4\005\ufff4\006\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\021\ufff4\023\ufff4\001\002" +
    "\000\024\004\ufff5\005\ufff5\006\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\021\ufff5\023\ufff5\001\002\000\010\022\034" +
    "\023\033\025\032\001\002\000\024\004\uffeb\005\uffeb\006" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\023\uffeb" +
    "\001\002\000\024\004\uffea\005\uffea\006\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\021\uffea\023\uffea\001\002\000\024" +
    "\004\uffe9\005\uffe9\006\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\021\uffe9\023\uffe9\001\002\000\024\004\ufff7\005\ufff7" +
    "\006\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\021\ufff7\023" +
    "\ufff7\001\002\000\004\021\uffff\001\002\000\004\017\052" +
    "\001\002\000\004\007\041\001\002\000\004\020\042\001" +
    "\002\000\024\004\025\005\010\006\013\013\015\014\017" +
    "\015\021\016\011\021\ufffe\023\024\001\002\000\004\021" +
    "\044\001\002\000\026\004\uffed\005\uffed\006\uffed\010\046" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\021\uffed\023\uffed\001" +
    "\002\000\024\004\uffef\005\uffef\006\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\021\uffef\023\uffef\001\002\000\004\020" +
    "\047\001\002\000\024\004\025\005\010\006\013\013\015" +
    "\014\017\015\021\016\011\021\ufffe\023\024\001\002\000" +
    "\004\021\051\001\002\000\024\004\uffee\005\uffee\006\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\021\uffee\023\uffee\001" +
    "\002\000\004\024\053\001\002\000\004\007\uffec\001\002" +
    "\000\004\012\055\001\002\000\004\002\001\001\002\000" +
    "\004\017\057\001\002\000\010\022\034\023\033\025\032" +
    "\001\002\000\024\004\ufff8\005\ufff8\006\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\021\ufff8\023\ufff8\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\011\004\013\005\017\006\015" +
    "\007\022\010\021\011\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\037\001\001\000\020\003\035\004\013\005\017\006" +
    "\015\007\022\010\021\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\042\004\013\005" +
    "\017\006\015\007\022\010\021\011\006\001\001\000\002" +
    "\001\001\000\004\012\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\047\004\013\005\017\006\015" +
    "\007\022\010\021\011\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\057\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$WheelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$WheelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$WheelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$WheelParser$actions {
  private final WheelParser parser;

  /** Constructor */
  CUP$WheelParser$actions(WheelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$WheelParser$do_action(
    int                        CUP$WheelParser$act_num,
    java_cup.runtime.lr_parser CUP$WheelParser$parser,
    java.util.Stack            CUP$WheelParser$stack,
    int                        CUP$WheelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$WheelParser$result;

      /* select the action based on the action number */
      switch (CUP$WheelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicion ::= IDENTIFICADOR igual ESTADO 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-2)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sino_opcional ::= 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("sino_opcional",8, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sino_opcional ::= sino llave_izq instrucciones llave_der 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("sino_opcional",8, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-3)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicional ::= si condicion entonces llave_izq instrucciones llave_der sino_opcional 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("condicional",7, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-6)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // accion ::= retroceder 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("accion",6, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // accion ::= girar 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("accion",6, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // accion ::= detener 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("accion",6, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // accion ::= avanzar 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("accion",6, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mostrar_op ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("mostrar_op",11, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mostrar_op ::= CADENA 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("mostrar_op",11, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mostrar_instr ::= mostrar mostrar_op 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("mostrar_instr",5, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-1)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacion ::= IDENTIFICADOR igual expresion 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-2)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_variable ::= variable IDENTIFICADOR igual expresion 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",3, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-3)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= condicional 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= accion 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= mostrar_instr 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-1)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-1)).value;
		RESULT = start_val;
              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-1)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$WheelParser$parser.done_parsing();
          return CUP$WheelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= inicio llave_izq instrucciones llave_der fin 
            {
              Object RESULT =null;
		 System.out.println("Análisis sintáctico exitoso"); 
              CUP$WheelParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$WheelParser$stack.elementAt(CUP$WheelParser$top-4)), ((java_cup.runtime.Symbol)CUP$WheelParser$stack.peek()), RESULT);
            }
          return CUP$WheelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

