/* The following code was generated by JFlex 1.4.3 on 13/05/25, 21:19 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/05/25, 21:19 from the specification file
 * <tt>C:/Users/alanc/OneDrive/Documents/Tec/10mo Semestre/Lenguajes y Automatas/compilador/src/codigo/WheelScriptLexer.flex</tt>
 */
public class WheelScriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\50\2\0\1\53\22\0\1\53\1\31\1\45\5\0"+
    "\1\41\1\42\2\0\1\43\2\0\1\51\12\46\1\0\1\44\1\33"+
    "\1\30\1\32\2\0\32\52\1\37\1\47\1\40\1\0\1\24\1\0"+
    "\1\1\1\21\1\20\1\10\1\11\1\22\1\6\1\26\1\7\2\52"+
    "\1\17\1\15\1\3\1\16\1\14\1\25\1\5\1\13\1\12\1\23"+
    "\1\2\1\52\1\27\1\34\1\4\1\35\1\0\1\36\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\2\1\3\4\2\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\4\2\1\23"+
    "\10\2\1\24\10\2\1\25\1\26\1\27\1\0\1\30"+
    "\1\0\1\31\27\2\1\32\1\2\1\0\22\2\1\33"+
    "\3\2\1\34\4\2\1\21\10\2\1\35\10\2\1\36"+
    "\10\2\1\37\5\2\1\40\1\2\1\41\2\2\1\42"+
    "\10\2\1\43\1\2\1\44\4\2\1\45\1\2\1\46"+
    "\1\47\2\2\1\50\2\2\1\51\2\2\1\52\1\53"+
    "\1\54\1\2\1\55\1\56\1\57\1\60\3\2\1\61"+
    "\6\2\1\62\1\63\1\64\15\2\1\65\1\66\1\2"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\334\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\54\0\u0318\0\u0344\0\u0370\0\334"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\334\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\54\0\54\0\54\0\u039c\0\54\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\334\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c"+
    "\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\334\0\u0fa4\0\u0fd0"+
    "\0\u0ffc\0\334\0\u1028\0\u1054\0\u1080\0\u10ac\0\u0c60\0\u10d8"+
    "\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\334"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c"+
    "\0\334\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0"+
    "\0\u14cc\0\334\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\334"+
    "\0\u15d4\0\334\0\u1600\0\u162c\0\334\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\334\0\u17b8\0\334"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\334\0\u1894\0\334\0\334"+
    "\0\u18c0\0\u18ec\0\334\0\u1918\0\u1944\0\334\0\u1970\0\u199c"+
    "\0\334\0\334\0\334\0\u19c8\0\334\0\334\0\334\0\334"+
    "\0\u19f4\0\u1a20\0\u1a4c\0\334\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc"+
    "\0\u1b28\0\u1b54\0\334\0\334\0\334\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"+
    "\0\u1d64\0\u1d90\0\334\0\334\0\u1dbc\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\6\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\5\6\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\1\44\1\6\1\43"+
    "\55\0\1\6\1\45\11\6\1\46\3\6\1\47\7\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\1\50"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\15\6\1\51\11\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\27\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\10\6\1\52\4\6\1\53\11\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\6\6\1\54"+
    "\20\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\2\6\1\55\24\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\10\6\1\56\16\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\2\6\1\57\7\6\1\60"+
    "\14\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\10\6\1\61\16\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\6\6\1\62\1\6\1\63\16\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\6\6\1\64"+
    "\6\6\1\65\11\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\10\6\1\66\16\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\15\6\1\67\11\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\15\6\1\70"+
    "\11\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\6\6\1\71\13\6\1\72\4\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\31\0\1\73\53\0\1\74\53\0"+
    "\1\75\23\0\45\76\1\77\2\76\1\0\3\76\46\0"+
    "\1\42\1\100\54\0\1\43\2\0\1\43\51\0\1\101"+
    "\3\0\1\102\26\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\1\103\26\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\11\6\1\104\15\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\4\6\1\105\22\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\11\6"+
    "\1\106\1\6\1\107\13\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\14\6\1\110\12\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\4\6\1\111\22\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\1\112"+
    "\5\6\1\113\20\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\11\6\1\114\5\6\1\115\7\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\11\6\1\116"+
    "\5\6\1\117\7\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\13\6\1\120\13\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\26\6\1\121\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\2\6\1\122\24\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\2\6"+
    "\1\123\24\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\10\6\1\124\16\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\12\6\1\125\14\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\10\6\1\126\16\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\2\6"+
    "\1\127\24\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\17\6\1\130\7\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\2\6\1\131\24\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\2\6\1\132\24\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\1\0\50\133"+
    "\1\0\3\133\50\101\1\0\3\101\1\0\2\6\1\134"+
    "\24\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\5\6\1\135\21\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\6\6\1\136\20\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\6\6\1\137\20\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\4\6\1\140"+
    "\10\6\1\141\11\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\10\6\1\142\16\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\13\6\1\143\13\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\1\144\26\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\17\6"+
    "\1\145\7\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\17\6\1\146\7\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\10\6\1\147\16\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\6\6\1\150\20\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\10\6"+
    "\1\151\4\6\1\152\11\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\10\6\1\153\16\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\10\6\1\154\16\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\11\6"+
    "\1\155\15\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\15\6\1\156\11\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\12\6\1\157\14\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\2\6\1\160\24\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\11\6"+
    "\1\161\15\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\4\6\1\162\22\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\11\6\1\163\1\164\14\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\6\6\1\165"+
    "\20\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\17\6\1\166\7\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\47\0\1\167\6\0\3\6\1\170\23\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\1\171\26\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\1\6"+
    "\1\172\25\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\1\173\26\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\15\6\1\174\11\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\4\6\1\175\22\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\11\6\1\176"+
    "\15\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\10\6\1\177\16\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\4\6\1\200\22\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\11\6\1\201\15\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\6\6\1\202"+
    "\20\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\2\6\1\203\24\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\14\6\1\204\12\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\4\6\1\205\22\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\2\6\1\206"+
    "\24\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\2\6\1\207\24\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\4\6\1\210\22\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\15\6\1\211\11\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\15\6\1\212"+
    "\11\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\11\6\1\213\15\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\4\6\1\214\22\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\6\6\1\215\20\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\11\6\1\216"+
    "\15\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\2\6\1\217\24\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\6\6\1\220\20\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\1\221\26\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\4\6\1\222\22\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\1\223"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\20\6\1\224\6\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\17\6\1\225\7\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\2\6\1\226\24\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\6\6\1\227"+
    "\20\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\4\6\1\230\22\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\6\6\1\231\20\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\15\6\1\232\11\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\10\6\1\233"+
    "\16\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\1\234\26\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\15\6\1\235\11\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\17\6\1\236\7\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\7\6\1\237\17\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\1\240"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\4\6\1\241\22\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\4\6\1\242\22\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\1\243\26\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\2\6\1\244\24\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\1\245"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\1\246\26\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\15\6\1\247\11\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\4\6\1\250\22\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\7\6\1\251\17\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\16\6"+
    "\1\252\10\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\10\6\1\253\16\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\1\254\26\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\4\6\1\255\22\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\1\6\1\256"+
    "\25\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\4\6\1\257\22\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\16\6\1\260\10\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\10\6\1\261\16\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\10\6\1\262"+
    "\16\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\4\6\1\263\22\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\23\6\1\264\3\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\1\265\26\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\4\6\1\266\22\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\22\6"+
    "\1\267\4\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\2\6\1\270\24\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\2\6\1\271\24\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\15\6\1\272\11\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\10\6"+
    "\1\273\16\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\7\6\1\274\17\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\4\6\1\275\22\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\15\6\1\276\11\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\12\6"+
    "\1\277\14\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\4\6\1\300\22\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\6\6\1\301\1\302\11\6\1\303"+
    "\5\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\12\6\1\304\14\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\1\305\26\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\11\6\1\306\15\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\10\6\1\307\16\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\3\6"+
    "\1\310\23\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\10\6\1\311\16\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\4\6\1\312\22\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\4\6\1\313\22\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\10\6"+
    "\1\314\16\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\4\6\1\315\22\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\24\6\1\316\2\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\4\6\1\317\22\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\15\6"+
    "\1\320\11\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\22\6\1\321\4\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\10\6\1\322\16\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\2\6\1\323\24\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\6\6"+
    "\1\324\20\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\17\6\1\325\7\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\2\0\11\6\1\326\15\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\2\0\10\6\1\327\16\6"+
    "\4\0\1\6\11\0\1\6\3\0\1\6\2\0\25\6"+
    "\1\330\1\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\2\0\1\331\26\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\4\6\1\332\22\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\2\0\15\6\1\333\11\6\4\0"+
    "\1\6\11\0\1\6\3\0\1\6\2\0\16\6\1\334"+
    "\10\6\4\0\1\6\11\0\1\6\3\0\1\6\2\0"+
    "\7\6\1\335\17\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\2\0\15\6\1\336\11\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7656];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\4\1\10\11\32\1\3\11"+
    "\1\0\1\11\1\0\32\1\1\0\203\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Importamos el enum Tokens
  import java.io.*;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WheelScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public WheelScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { return Tokens.ESPERAR;
          }
        case 56: break;
        case 39: 
          { return Tokens.DECIMAL;
          }
        case 57: break;
        case 12: 
          { return Tokens.PAR_ABRE;
          }
        case 58: break;
        case 23: 
          { return Tokens.MENOR_IGUAL;
          }
        case 59: break;
        case 28: 
          { return Tokens.LEER;
          }
        case 60: break;
        case 41: 
          { return Tokens.MOSTRAR;
          }
        case 61: break;
        case 5: 
          { return Tokens.MAYOR;
          }
        case 62: break;
        case 16: 
          { return Tokens.COMILLA_DOBLE;
          }
        case 63: break;
        case 7: 
          { return Tokens.AND;
          }
        case 64: break;
        case 33: 
          { return Tokens.INICIO;
          }
        case 65: break;
        case 52: 
          { return Tokens.RETROCEDER;
          }
        case 66: break;
        case 14: 
          { return Tokens.COMA;
          }
        case 67: break;
        case 49: 
          { return Tokens.MIENTRAS;
          }
        case 68: break;
        case 50: 
          { return Tokens.CONTINUAR;
          }
        case 69: break;
        case 3: 
          { return Tokens.OR;
          }
        case 70: break;
        case 4: 
          { return Tokens.IGUAL;
          }
        case 71: break;
        case 48: 
          { return Tokens.ENCENDER;
          }
        case 72: break;
        case 15: 
          { return Tokens.PUNTOCOMA;
          }
        case 73: break;
        case 55: 
          { return Tokens.SENSOR_IZQUIERDO;
          }
        case 74: break;
        case 19: 
          { return Tokens.NO;
          }
        case 75: break;
        case 1: 
          { return Tokens.ERROR;
          }
        case 76: break;
        case 32: 
          { return Tokens.ROMPER;
          }
        case 77: break;
        case 46: 
          { return Tokens.INACTIVO;
          }
        case 78: break;
        case 6: 
          { return Tokens.MENOR;
          }
        case 79: break;
        case 13: 
          { return Tokens.PAR_CIERRA;
          }
        case 80: break;
        case 17: 
          { return Tokens.NUMERO;
          }
        case 81: break;
        case 26: 
          { return Tokens.FIN;
          }
        case 82: break;
        case 29: 
          { return Tokens.GIRAR;
          }
        case 83: break;
        case 22: 
          { return Tokens.MAYOR_IGUAL;
          }
        case 84: break;
        case 21: 
          { return Tokens.DIFERENTE;
          }
        case 85: break;
        case 42: 
          { return Tokens.FUNCION;
          }
        case 86: break;
        case 30: 
          { return Tokens.TEXTO;
          }
        case 87: break;
        case 43: 
          { return Tokens.ACTIVADO;
          }
        case 88: break;
        case 54: 
          { return Tokens.SENSOR_FRONTAL;
          }
        case 89: break;
        case 24: 
          { return Tokens.CADENA;
          }
        case 90: break;
        case 8: 
          { return Tokens.LLAVE_ABRE;
          }
        case 91: break;
        case 53: 
          { return Tokens.SENSOR_DERECHO;
          }
        case 92: break;
        case 27: 
          { return Tokens.SINO;
          }
        case 93: break;
        case 51: 
          { return Tokens.CONSTANTE;
          }
        case 94: break;
        case 36: 
          { return Tokens.AVANZAR;
          }
        case 95: break;
        case 11: 
          { return Tokens.CORCHETE_CIERRA;
          }
        case 96: break;
        case 35: 
          { return Tokens.BOCINA;
          }
        case 97: break;
        case 20: 
          { return Tokens.SI;
          }
        case 98: break;
        case 9: 
          { return Tokens.LLAVE_CIERRA;
          }
        case 99: break;
        case 47: 
          { return Tokens.ENTONCES;
          }
        case 100: break;
        case 38: 
          { return Tokens.DETENER;
          }
        case 101: break;
        case 25: 
          { return Tokens.COMENTARIO;
          }
        case 102: break;
        case 37: 
          { return Tokens.REPETIR;
          }
        case 103: break;
        case 10: 
          { return Tokens.CORCHETE_ABRE;
          }
        case 104: break;
        case 45: 
          { return Tokens.RETORNAR;
          }
        case 105: break;
        case 44: 
          { return Tokens.VARIABLE;
          }
        case 106: break;
        case 2: 
          { return Tokens.IDENTIFICADOR;
          }
        case 107: break;
        case 18: 
          { /* ignorar espacios */
          }
        case 108: break;
        case 34: 
          { return Tokens.ENTERO;
          }
        case 109: break;
        case 31: 
          { return Tokens.APAGAR;
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
